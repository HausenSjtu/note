静态变量用处：
1、需要保留函数上一次调用结束时的值
2、初始化后，变量只被引用，不被修改
3、不让别的文件看见

引用传递与指针传递形参有何不同：
1、使用引用就不必在函数中声明形参是指针变量，指针变量需要另外开辟内存单元。而引用不是一个独立变量，不占内存单元。
2、实参不必用变量的地址（在变量前面加&），系统向形参传送的是实参的地址而不是实参的值。

引用和取变量地址的区别：
当&a前面有类型符，是引用（如 int &a)，当前面无类型符（如cout<<&s）是取变量的地址

内联函数：
在函数声明或者定义时加inline都可以，也可以同时加
其实就是把函数调用处替换为函数体
如果把递归声明为内联函数，编译器是不会置换的（忽略内敛函数的声明）
重载函数：
要么参数个数不同，要么参数类型不同，不然编译器无法识别
带默认参数的函数：
实参与形参的结合是从左置右的，所以默认值的参数必须放在形参列中中的最右端，否则会出错
如果函数调用在函数定义之前，则必须在声明的时候就给出默认值
一个函数不能即作为重载函数，又做为带默认值的函数，否则会出现二义性
函数的嵌套：
在C++中，每个函数的定义必须是平行的

动态存储区：
1、函数形式参数
2、函数中的自动变量（未加static声明的局部变量）
3、函数调用时的现场保护和返回地址

















extern：
1、在同一个文件中，提前声明全局变量，这样就可以合法地引用该全局变量了，即使定义在引用之后
2、一个文件中要引用另一个文件中的全局变量num，不能分别在两个文件中各自定义num，否则会出现“重复定义的错误”，可以在此文件中声明extern int num
3、extern只能用来声明，不能用来定义

static：
1、在局部变量前面加，则此变量存储在静态存储区，不会被释放
2、在全局变量前面加，则此变量不能被别的文件由extern引用














